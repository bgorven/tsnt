//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace Tas.Core.TenantStatus
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TenantStatus 
    {
        /// <summary>a number representing the 'configuration version' of this tenant. Incremented on any changes to the installed apps.</summary>
        [Newtonsoft.Json.JsonProperty("incarnation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Incarnation { get; set; }
    
        /// <summary>a number representing the 'security version' of this tenant. Incremented when tenant signals such during a patch operation.</summary>
        [Newtonsoft.Json.JsonProperty("securityGeneration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SecurityGeneration { get; set; }
    
        /// <summary>The tenant's current status.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TenantStatusState? State { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Newtonsoft.Json.Converters.StringEnumConverter() });
        }
        
        public static TenantStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TenantStatus>(data, new Newtonsoft.Json.JsonConverter[] { new Newtonsoft.Json.Converters.StringEnumConverter() });
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TenantStatusState
    {
        [System.Runtime.Serialization.EnumMember(Value = "PREHALTING")]
        PREHALTING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PREHALTED")]
        PREHALTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HALTING")]
        HALTING = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "HALTED")]
        HALTED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PRESTARTING")]
        PRESTARTING = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PRESTARTED")]
        PRESTARTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "STARTING")]
        STARTING = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "STARTED")]
        STARTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "BROKEN")]
        BROKEN = 8,
    
    }
}