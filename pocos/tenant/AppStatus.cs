//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace Tas.Tenant.AppStatus
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AppStatus 
    {
        /// <summary>a (probably tenant-specific) url of the landing page for this app. The landing page is where the user is led to after clicking [open] in the UI.</summary>
        [Newtonsoft.Json.JsonProperty("landingPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LandingPage { get; set; }
    
        /// <summary>a url of a settings page for this app. The setup page is where the user is led to after clicking [settings] in the UI. After setup is complete the app should redirect the user back to the passed in relayPage.</summary>
        [Newtonsoft.Json.JsonProperty("settingsPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettingsPage { get; set; }
    
        /// <summary>true if the app is unusable or degraded due to lack of some setup. When true, this causes the setup required indicator to appear next to the app in the UI. When true, the app should provide a value for settingsPage.</summary>
        [Newtonsoft.Json.JsonProperty("setupRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SetupRequired { get; set; }
    
        /// <summary>An array of domains that your app uses. The tenant's IT team can view this, rolled up with all other installed apps, in order to add to Trusted Sites in bulk.</summary>
        [Newtonsoft.Json.JsonProperty("domainsUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> DomainsUsed { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Newtonsoft.Json.Converters.StringEnumConverter() });
        }
        
        public static AppStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AppStatus>(data, new Newtonsoft.Json.JsonConverter[] { new Newtonsoft.Json.Converters.StringEnumConverter() });
        }
    }
}